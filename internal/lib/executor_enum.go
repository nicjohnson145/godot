// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.0
// Revision: bc24b100a9e3ef3c4271209e99c6ac57597446f3
// Build Date: 2022-08-03T22:36:20Z
// Built By: goreleaser

package lib

import (
	"fmt"
	"strings"
)

const (
	// ExecutorTypeConfigFiles is a ExecutorType of type config-files.
	ExecutorTypeConfigFiles ExecutorType = "config-files"
	// ExecutorTypeGithubReleases is a ExecutorType of type github-releases.
	ExecutorTypeGithubReleases ExecutorType = "github-releases"
	// ExecutorTypeGitRepos is a ExecutorType of type git-repos.
	ExecutorTypeGitRepos ExecutorType = "git-repos"
	// ExecutorTypeSysPackages is a ExecutorType of type sys-packages.
	ExecutorTypeSysPackages ExecutorType = "sys-packages"
	// ExecutorTypeUrlDownloads is a ExecutorType of type url-downloads.
	ExecutorTypeUrlDownloads ExecutorType = "url-downloads"
)

var _ExecutorTypeNames = []string{
	string(ExecutorTypeConfigFiles),
	string(ExecutorTypeGithubReleases),
	string(ExecutorTypeGitRepos),
	string(ExecutorTypeSysPackages),
	string(ExecutorTypeUrlDownloads),
}

// ExecutorTypeNames returns a list of possible string values of ExecutorType.
func ExecutorTypeNames() []string {
	tmp := make([]string, len(_ExecutorTypeNames))
	copy(tmp, _ExecutorTypeNames)
	return tmp
}

// String implements the Stringer interface.
func (x ExecutorType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x ExecutorType) IsValid() bool {
	_, err := ParseExecutorType(string(x))
	return err == nil
}

var _ExecutorTypeValue = map[string]ExecutorType{
	"config-files":    ExecutorTypeConfigFiles,
	"github-releases": ExecutorTypeGithubReleases,
	"git-repos":       ExecutorTypeGitRepos,
	"sys-packages":    ExecutorTypeSysPackages,
	"url-downloads":   ExecutorTypeUrlDownloads,
}

// ParseExecutorType attempts to convert a string to a ExecutorType.
func ParseExecutorType(name string) (ExecutorType, error) {
	if x, ok := _ExecutorTypeValue[name]; ok {
		return x, nil
	}
	return ExecutorType(""), fmt.Errorf("%s is not a valid ExecutorType, try [%s]", name, strings.Join(_ExecutorTypeNames, ", "))
}

// MarshalText implements the text marshaller method.
func (x ExecutorType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ExecutorType) UnmarshalText(text []byte) error {
	tmp, err := ParseExecutorType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *ExecutorType) Set(val string) error {
	v, err := ParseExecutorType(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *ExecutorType) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *ExecutorType) Type() string {
	return "ExecutorType"
}
